spring:
  application:
    name: gateway
  #redis:
  #  host: localhost
  #  port: 6379
  cloud:
    gateway:
      routes:
        - id: customer
          uri: http://localhost:8040
          predicates:
            - Path=/customers/**
          filters:
            - RemoveRequestHeader=Cookie
            #- RewritePath=/customers/(?<path>.*), /$\{path}
        #- name: RequestRateLimiter
        #    args:
        #      redis-rate-limiter.replenishRate: 10 #quantos pedidos por segundo é autorizado a enviar sem quaisquer pedidos descartados
        #      redis-rate-limiter.burstCapacity: 20 #numero máximo de pedidos que um utilizador e autorizado a fazer em um único segundo
  security:
    oauth2:
      client:
        provider:
          keycloak:
            token-uri: http://localhost:8080/auth/realms/master/protocol/openid-connect/token
            authorization-uri: http://localhost:8080/auth/realms/master/protocol/openid-connect/auth
            userinfo-uri: http://localhost:8080/auth/realms/master/protocol/openid-connect/userinfo
            user-name-attribute: preferred_username
        registration:
          keycloak-with-test-scope: #client1
            provider: keycloak
            client-id: spring-with-test-scope
            client-secret: c6480137-1526-4c3e-aed3-295aabcb7609
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"
          keycloak-without-test-scope: #client2
            provider: keycloak
            client-id: spring-without-test-scope
            client-secret: f6fc369d-49ce-4132-8282-5b5d413eba23
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"

server.port: 8060

logging.level:
  org.springframework.cloud.gateway: DEBUG
  org.springframework.security: DEBUG
  org.springframework.web.reactive.function.client: TRACE